import sys
sys.stdin = open("input.txt", "r")

'''
문제는 dp배열에 각 자리에 가장 긴 감소하는 부분 수열을 만드는 것이다.
예를 들어
arr이 40 30 10 20 10 일 경우
첫자리 40은 본인이 제일 마지막 수일 때 감소하는 수열이 없기 때문에 자기자신 1뿐이다 dp = [1]
30은 자기보다 큰수가 40이 있기 때문에 30이 마지막 수일 경우 40 30으로 2가 들어간다 dp = [1, 2]
10은 자기보다 큰수가 30이 있는데 30은 이미 전에 구했던 대로 가장 긴 감소하는 수열이 2이기 때문에 2 + 1 dp = [1,2,3]
여기서 20은 바로 앞이 10인데 자기보다 작은 수이기 때문에 10에서 구한 경우의 수는 제외한다
그럼 30이 바로 앞의 가장 큰수인데 그렇다면 30의 자리의 가장 긴 수열 2 + 1이 된다 dp = [1,2,3,3]
10인 경우엔 본인보다 큰수가 바로 앞의 20이고 20의 자리의 dp 수열이 가장 max 값을 가지기 때문에, 4+1 dp = [1,2,3,3,4]
따라서 가장 긴 수열은 4가 된다. 40 30 '10(제외)' 20 10
'''

a = int(input())
arr = list(map(int, input().split()))

'''
각각의 arr 자리에 있는 수에서 감소하는 길이가 없을 경우 자기자신 1개만 있기 때문에
1로 초기화
'''
dp = [1] * (a + 1)

for i in range(1, a):
    for j in range(i):
        '''
        0부터 i 까지 돌면서 가장 긴 수열의 값을 찾는다 
        +1은 각 자리 수의 가장 긴 수열의 자기 자신 포함이기 때문에 +1하여 
        앞서 계산된 자기 자신과 비교하여 더 긴 것을 dp[i]에 넣는다
        '''
        if arr[i] < arr[j]:
            dp[i] = max(dp[i], dp[j] + 1)

print(max(dp))
